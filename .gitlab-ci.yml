variables:
  DOCKER_IMAGE: artemraudsep/cat_project
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""  # Отключаем TLS (иначе dind требует сертификаты)
  POSTGRES_DB: cat_project_db
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: Olga_Platon_Postgres_666
  DATABASE_URL: "postgresql://postgres:DB_PASWWORD@postgres:5432/data_base_db"

stages:
  - build
  - test
  - deploy

build-job:
  stage: build
  image: docker:20.10
  services:
    - name: docker:dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker build -t $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:latest
  after_script:
    - docker image prune -f
    - docker container prune -f
    - docker builder prune -f
  only:
    - main


test-job:
  stage: test
  image: python:3.11
  services:
    - name: postgres:latest
  variables:
    POSTGRES_DB: cat_project_db
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: Olga_Platon_Postgres_666
  before_script:
    - pip install -r requirements.txt
  script:
    - python -m pytest tests/test_api.py
  only:
    - main

deploy-job:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $DEPLOY_SERVER_IP >> ~/.ssh/known_hosts
  script:
    - scp docker-compose.yml $DEPLOY_USER@$DEPLOY_SERVER_IP:/home/$DEPLOY_USER/cat_project/
    - |
      ssh $DEPLOY_USER@$DEPLOY_SERVER_IP <<EOF
      cd ~/cat_project
        echo "DB_HOST=$DB_HOST" > .env
        echo "DB_PORT=$DB_PORT" >> .env
        echo "DB_USER=$DB_USER" >> .env
        echo "DB_PASS=$DB_PASS" >> .env
        echo "DB_NAME=$DB_NAME" >> .env
        echo "REDIS_HOST=$REDIS_HOST" >> .env
        echo "REDIS_URL=$REDIS_URL" >> .env
        echo "BOT_TOKEN=$BOT_TOKEN" >> .env
        echo "ADMINS_LIST=$ADMINS_LIST" >> .env
        echo "BOT_ADDRESS=$BOT_ADDRESS" >> .env
        docker-compose pull
        docker-compose up -d --remove-orphans
      EOF
  only:
    - main





